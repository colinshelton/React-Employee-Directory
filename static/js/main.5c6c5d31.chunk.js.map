{"version":3,"sources":["utils/API.js","components/Table.js","App.js","index.js"],"names":["axios","get","Table","state","employees","filteredEmployees","userInput","ascending","handleInput","e","setState","target","value","filter","employee","regex","RegExp","name","last","match","handleSort","current","sorted","sort","a","b","toLowerCase","localeCompare","API","response","this","data","results","console","log","className","placeholder","onChange","scope","onClick","undefined","map","index","key","login","uuid","first","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAIe,EACH,WACR,OAAOA,IAAMC,IAJD,0CCuGDC,E,4MArGbC,MAAQ,CACNC,UAAW,GAGXC,kBAAmB,GACnBC,UAAW,GACXC,WAAW,G,EAYbC,YAAc,SAACC,GACb,EAAKC,SAAS,CACZJ,UAAWG,EAAEE,OAAOC,MACpBP,kBAAmB,YAAI,EAAKF,MAAMC,WAAWS,QAAO,SAACC,GACnD,IAAMC,EAAQ,IAAIC,OAAOP,EAAEE,OAAOC,MAAO,MACzC,OAAOE,EAASG,KAAKC,KAAKC,MAAMJ,S,EAKtCK,WAAa,SAACX,GACZ,IAAMY,EAAU,EAAKlB,MAAMI,UACvBe,EAAS,GAEXA,EADED,EACO,EAAKlB,MAAME,kBAAkBkB,MAAK,SAAUC,EAAGC,GACtD,OAAOD,EAAEP,KAAKC,KACXQ,cACAC,cAAcF,EAAER,KAAKC,KAAKQ,kBAGtB,EAAKvB,MAAME,kBAAkBkB,MAAK,SAAUC,EAAGC,GACtD,OAAOA,EAAER,KAAKC,KACXQ,cACAC,cAAcH,EAAEP,KAAKC,KAAKQ,kBAGjC,EAAKhB,SAAS,CACZL,kBAAmBiB,EACnBf,WAAYc,K,kMApCSO,I,OAAjBC,E,OACNC,KAAKpB,SAAS,CACZN,UAAWyB,EAASE,KAAKC,QACzB3B,kBAAmBwB,EAASE,KAAKC,UAEnCC,QAAQC,IAAIL,EAASE,KAAKC,S,qIA2ClB,IAAD,OAIP,OAHAC,QAAQC,IAAI,YAAaJ,KAAK3B,MAAMC,WACpC6B,QAAQC,IAAIJ,KAAK3B,MAAME,mBAGrB,yBAAK8B,UAAU,aACb,2BACEvB,MAAOkB,KAAK3B,MAAMG,UAClB8B,YAAY,+BACZC,SAAU,SAAC5B,GAAD,OAAO,EAAKD,YAAYC,MAEpC,2BAAO0B,UAAU,SACf,+BACE,4BACE,wBAAIG,MAAM,MAAMC,QAAST,KAAKV,YAA9B,iBACiBU,KAAK3B,MAAMI,UAAY,IAAM,UAE9C,wBAAI+B,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,UAGJ,oCACuCE,IAApCV,KAAK3B,MAAME,kBAAkB,SACWmC,IAAzCV,KAAK3B,MAAME,kBAAkB,GAAGY,KAC9Ba,KAAK3B,MAAME,kBAAkBoC,KAAI,SAAC3B,EAAU4B,GAC1C,OACE,wBAAIC,IAAK7B,EAAS8B,MAAMC,MACtB,4BAAKH,EAAQ,GACb,4BAAK5B,EAASG,KAAK6B,OACnB,4BAAKhC,EAASG,KAAKC,UAKzB,4C,GA7FM6B,aCSLC,MATf,WACE,OACE,6BACE,wBAAIb,UAAU,UAAd,0BACA,kBAAC,EAAD,QCANc,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.5c6c5d31.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst BASEURL = \"https://randomuser.me/api/?results=10\";\n\nexport default {\n  getUsers: function () {\n    return axios.get(BASEURL);\n  },\n};\n","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\n\nclass Table extends Component {\n  state = {\n    employees: [],\n    // only do one API call that does not update\n    //use this for employee table\n    filteredEmployees: [],\n    userInput: \"\",\n    ascending: true,\n  };\n\n  async componentDidMount() {\n    const response = await API.getUsers();\n    this.setState({\n      employees: response.data.results,\n      filteredEmployees: response.data.results,\n    });\n    console.log(response.data.results);\n  }\n\n  handleInput = (e) => {\n    this.setState({\n      userInput: e.target.value,\n      filteredEmployees: [...this.state.employees].filter((employee) => {\n        const regex = new RegExp(e.target.value, \"gi\");\n        return employee.name.last.match(regex);\n      }),\n    });\n  };\n\n  handleSort = (e) => {\n    const current = this.state.ascending;\n    let sorted = [];\n    if (current) {\n      sorted = this.state.filteredEmployees.sort(function (a, b) {\n        return a.name.last\n          .toLowerCase()\n          .localeCompare(b.name.last.toLowerCase());\n      });\n    } else {\n      sorted = this.state.filteredEmployees.sort(function (a, b) {\n        return b.name.last\n          .toLowerCase()\n          .localeCompare(a.name.last.toLowerCase());\n      });\n    }\n    this.setState({\n      filteredEmployees: sorted,\n      ascending: !current,\n    });\n  };\n\n  // SORT by name need click handler for collum header, instead of filter call .sort and provide state value that is asending or descending\n  // sorted array will be off of second array\n  //.\n  // each will\n  // function handler\n  // this.target.value\n  // sort function\n\n  render() {\n    console.log(\"employees\", this.state.employees);\n    console.log(this.state.filteredEmployees);\n\n    return (\n      <div className=\"container\">\n        <input\n          value={this.state.userInput}\n          placeholder=\"Enter name to search for....\"\n          onChange={(e) => this.handleInput(e)}\n        />\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th scope=\"col\" onClick={this.handleSort}>\n                Click to SORT {this.state.ascending ? \"^\" : \"âŒ„\"}\n              </th>\n              <th scope=\"col\">First</th>\n              <th scope=\"col\">Last</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.filteredEmployees[0] !== undefined &&\n            this.state.filteredEmployees[0].name !== undefined ? (\n              this.state.filteredEmployees.map((employee, index) => {\n                return (\n                  <tr key={employee.login.uuid}>\n                    <td>{index + 1}</td>\n                    <td>{employee.name.first}</td>\n                    <td>{employee.name.last}</td>\n                  </tr>\n                );\n              })\n            ) : (\n              <></>\n            )}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Table;\n","import React from \"react\";\nimport Table from \"./components/Table\";\n\nfunction App() {\n  return (\n    <div>\n      <h1 className=\"header\">Employee Directory App</h1>\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n//import \"./index.css\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}